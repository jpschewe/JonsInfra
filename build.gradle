// -*- java -*-

import com.github.spotbugs.SpotBugsTask

import javax.xml.transform.TransformerFactory
import javax.xml.transform.stream.StreamResult
import javax.xml.transform.stream.StreamSource

import org.gradle.api.tasks.PathSensitivity
  
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
            classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.4.0'
            classpath 'net.sf.saxon:Saxon-HE:9.9.1-3'
    }
}    

plugins {
        id 'java-library'
        id 'distribution'
        id "com.dorongold.task-tree" version "1.3.1"
        id 'eclipse'
        id 'com.github.spotbugs' version '1.7.1'
        id "de.aaschmid.cpd" version "1.2"
        id "com.gorylenko.gradle-git-properties" version "2.0.0"
        id 'net.saliman.cobertura' version '2.6.0'
        id "com.jfrog.bintray" version "1.8.4"
        id "maven-publish"
        id "com.github.ben-manes.versions" version "0.21.0"
}


// needs to use old plugin mechanism otherwise I can't set the extra properties
ext.nextVersion = "patch"
ext.snapshotSuffix = "beta.<count>+g<sha><dirty>"
// optionally: ext.dirtyMarker = "-dirty" (default) replaces <dirty> in snapshotSuffix
// optionally: ext.gitDescribeArgs = '--match *[0-9].[0-9]*.[0-9]*' (default) or other arguments for git describe.
apply plugin: 'com.cinnober.gradle.semver-git'

repositories {
    mavenLocal()
    jcenter()
}

ext {
    slf4j_version = "1.7.26"
    junit_version = "5.4.0"
    spotbugs_version = '3.1.12'
}

group = 'net.mtu.eggplant'

dependencies {
    api group: "org.slf4j", name: "slf4j-api", version: project.slf4j_version
    
    compileOnly group: "com.github.spotbugs", name: "spotbugs-annotations", version: project.spotbugs_version
    api group: "com.google.code.findbugs", name: "jsr305", version: "3.0.1"
    
    implementation group: "commons-io", name: "commons-io", version: "2.6"
    
    implementation group: "xmlunit", name: "xmlunit", version: "1.6"
        
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.junit_version
}

test {
        ignoreFailures Boolean.getBoolean("test.ignoreFailures") 
    useJUnitPlatform()
}

javadoc {
        failOnError = false
}


cpdCheck {
        // allow the build to continue, catch this in CI as warnings
        ignoreFailures = true
}

task sloccount(type: Exec) {
        commandLine 'cloc', '--by-file', '--xml', '--out', "$buildDir/reports/sloccount/cloc.xml", 'src'
}

configurations {
    spotbugsStylesheets { transitive false }
}

dependencies {
    spotbugsStylesheets "com.github.spotbugs:spotbugs:$spotbugs.toolVersion"
}

spotbugs {
    toolVersion = project.spotbugs_version
    
    // allow the build to continue, catch this in CI as warnings
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("spotbugs-filters.xml")
}

// some extra tasks so that we can generate html AND xml
tasks.withType(SpotBugsTask) {
    reports {
        xml.withMessages true
        html.stylesheet resources.text.fromArchiveEntry(configurations.spotbugsStylesheets, 'color.xsl')
    }

    task "${it.name}HtmlReport" {
        def input = reports.xml.destination
        inputs.file reports.html.stylesheet.asFile() withPropertyName 'spotbugsStylesheet' withPathSensitivity PathSensitivity.NONE
        inputs.files fileTree(input) withPropertyName 'input' withPathSensitivity PathSensitivity.NONE skipWhenEmpty()
        def output = file(input.absolutePath.replaceFirst(/\.xml$/, '.html'))
        outputs.file output withPropertyName 'output'
        doLast {
            def factory = TransformerFactory.newInstance('net.sf.saxon.TransformerFactoryImpl', getClass().classLoader)
            def transformer = factory.newTransformer(new StreamSource(reports.html.stylesheet.asFile()));
            transformer.transform(new StreamSource(input), new StreamResult(output))
        }
    }
    it.finalizedBy "${it.name}HtmlReport"
}
distZip.dependsOn spotbugsMainHtmlReport
distTar.dependsOn spotbugsMainHtmlReport
distZip.dependsOn spotbugsTestHtmlReport
distTar.dependsOn spotbugsTestHtmlReport

gitProperties {
    gitPropertiesDir = "${buildDir}/resources/main/net/mtu/eggplant/util"
}

cobertura {
        coverageFormats = [ 'html', 'xml' ]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
distZip.dependsOn sourcesJar
distTar.dependsOn sourcesJar

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
distZip.dependsOn javadocJar
distTar.dependsOn javadocJar

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "2-Clause BSD License"
            url "https://opensource.org/licenses/BSD-2-Clause"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jspchewe"
            name "Jon Schewe"
            email "jpschewe@mtu.net"
        }
    }

    scm {
        url "https://github.com/jpschewe/JonsInfra"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Useful utilities')
                root.appendNode('name', 'JonsInfra')
                root.appendNode('url', 'https://github.com/jpschewe/JonsInfra')
                root.children().last() + pomConfig
            }
        }
        
        mavenJava(MavenPublication) {
            from components.java
        }        
    }
 
    repositories {
        mavenLocal()
    }
}

def bintrayProps = new Properties()
File bintrayPropertiesFile = project.file('../bintray.properties')
if(bintrayPropertiesFile.exists()) {
    bintrayPropertiesFile.withInputStream { bintrayProps.load(it) }
}

bintray {
        user = bintrayProps.getProperty('bintray.user')
        key = bintrayProps.getProperty('bintray.key')
        publications = ['mavenPublication']

        pkg {
                repo = 'maven'
                name = 'JonsInfra'
                licenses = ['BSD-2-Clause']
                vcsUrl = 'https://github.com/jpschewe/JonsInfra'
        }
}

task renderIndex(type: Copy) {
    from 'docs'
    into "$buildDir/rendered-docs"
    // Substitute property tokens in files
    //expand(VERSION: project.version)
    expand(project.properties)
    filteringCharset = 'UTF-8'
    
    outputs.upToDateWhen { false }
}
distTar.dependsOn renderIndex
distZip.dependsOn renderIndex

distributions {
    main {
        contents {
                        from(jar) {
                                into 'lib'
                        }
                from(javadocJar) {
                        into 'lib'
                        }
                from(sourcesJar) {
                        into 'lib'
                        }
            from(configurations.compileClasspath) {
                into 'lib'
                }
            
            from(renderIndex) {
            }   
            from(javadoc) {
                into 'docs/api'
            }
            from("$buildDir/reports/tests/") {
                into 'docs/reports'
                }
            from("$buildDir/reports/spotbugs/") {
                into 'docs/reports/spotbugs'
                }
            from("$buildDir/reports/cobertura/") {
                into 'docs/reports/coverage'
                }
                from('LICENSE') {
                }
        }
    }
}
distZip.dependsOn test
distTar.dependsOn test

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}  
