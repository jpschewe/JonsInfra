// -*- java -*-

import com.github.spotbugs.snom.SpotBugsTask

import org.myire.munge.TransformTask

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
          classpath(group: "com.cinnober.gradle", name: "semver-git", version: "3.0.0")        
    }
}    

plugins {
        id "java-library"
        id "distribution"
        id "com.dorongold.task-tree" version "1.5"
        id "eclipse"
        id "com.github.spotbugs" version "4.5.0"
        id "de.aaschmid.cpd" version "3.1"
        id "com.gorylenko.gradle-git-properties" version "2.2.3"
        id "net.saliman.cobertura" version "3.0.0"
        id "com.jfrog.bintray" version "1.8.5"
        id "maven-publish"
        id "com.github.ben-manes.versions" version "0.33.0" // adds dependencyUpdates task
        id "org.myire.munge" version "1.0" // transformer for spotbugs XML
        id "checkstyle"
        
        // Checker Framework pluggable type-checking
        id "org.checkerframework" version "0.5.16"
}


// needs to use old plugin mechanism otherwise I can't set the extra properties
ext.nextVersion = "patch"
ext.snapshotSuffix = "beta.<count>+g<sha><dirty>"
// optionally: ext.dirtyMarker = "-dirty" (default) replaces <dirty> in snapshotSuffix
// optionally: ext.gitDescribeArgs = '--match *[0-9].[0-9]*.[0-9]*' (default) or other arguments for git describe.
apply plugin: "com.cinnober.gradle.semver-git"

repositories {
    mavenLocal()
    jcenter()
}

ext {
    slf4j_version = "1.7.30"
    junit_version = "5.7.0"
    spotbugs_version = "4.1.3"
}

group = "net.mtu.eggplant"

java {
    // set version of Java that the source confirms to. 
    // The bytecode will be for this version of Java as well, unless targetCompatibility is specified.
    sourceCompatibility = JavaVersion.VERSION_11
}

dependencies {
    api(group: "org.slf4j", name: "slf4j-api", version: project.slf4j_version)
    
    compileOnly(group: "com.github.spotbugs", name: "spotbugs-annotations", version: project.spotbugs_version)
    api(group: "com.google.code.findbugs", name: "jsr305", version: "3.0.2")
    
    implementation(group: "xmlunit", name: "xmlunit", version: "1.6")
        
     // make sure to update Jenkinsfile when the version changes, the tag needs to change in the git checkout
    implementation(group: "org.checkerframework", name: "checker-qual", version: "3.11.0")
    implementation(group: "org.checkerframework", name: "checker-util", version: "3.11.0")
        
    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-api", version: project.junit_version)
    testImplementation(group: "org.junit.jupiter", name: "junit-jupiter-params", version: project.junit_version)  
    testImplementation(group: "org.hamcrest", name: "hamcrest", version: "2.2")      
    testRuntimeOnly(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: project.junit_version)
}

test {
    ignoreFailures Boolean.getBoolean("test.ignoreFailures") 
    useJUnitPlatform()
}

javadoc {
    failOnError = false
    options.addStringOption("Xmaxwarns", "10000")        
}


cpdCheck {
    // allow the build to continue, catch this in CI as warnings
    ignoreFailures = true
}

task sloccount(type: Exec) {
    commandLine "cloc", "--by-file", "--xml", "--out", "$buildDir/reports/sloccount/cloc.xml", "src"
}

configurations {
    spotbugsStylesheets { transitive false }
}

dependencies {
  spotbugsStylesheets("com.github.spotbugs:spotbugs:$project.spotbugs_version")
}

tasks.register("distributionDependencies") {
    doFirst {
      println("Distribution dependnecies")
    }
}
distTar.dependsOn(distributionDependencies)
distZip.dependsOn(distributionDependencies)

spotbugs {
    toolVersion = project.spotbugs_version
    
    // allow the build to continue, catch this in CI as warnings
    ignoreFailures = true
    effort = "max"
    reportLevel = "low"
    excludeFilter = file("spotbugs-filters.xml")
}

tasks.withType(SpotBugsTask) {
    def stylesheetName = "fancy-hist.xsl"

    distributionDependencies.dependsOn("${it.name}")
    
    def xmlOutput = it.outputs.files.singleFile
    def htmlOutput = file(xmlOutput.absolutePath.replaceFirst(/\.xml$/, ".html"))
    
    tasks.register("${it.name}HtmlReport", TransformTask) {
        saxon {
            source(xmlOutput)
            template(resources.text.fromArchiveEntry(configurations.spotbugsStylesheets, stylesheetName))
            outputFile = htmlOutput
        }       
    }
    it.finalizedBy("${it.name}HtmlReport")
}

gitProperties {
    gitPropertiesDir = "${buildDir}/resources/main/net/mtu/eggplant/util"
}

cobertura {
    coverageFormats = [ "html", "xml" ]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}
distZip.dependsOn sourcesJar
distTar.dependsOn sourcesJar

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}
distZip.dependsOn javadocJar
distTar.dependsOn javadocJar

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "2-Clause BSD License"
            url "https://opensource.org/licenses/BSD-2-Clause"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jspchewe"
            name "Jon Schewe"
            email "jpschewe@mtu.net"
        }
    }

    scm {
        url "https://github.com/jpschewe/JonsInfra"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            pom.withXml {
                def root = asNode()
                root.appendNode("description", "Useful utilities")
                root.appendNode("name", "JonsInfra")
                root.appendNode("url", "https://github.com/jpschewe/JonsInfra")
                root.children().last() + pomConfig
            }
        }
        
        mavenJava(MavenPublication) {
            from components.java
        }        
    }
 
    repositories {
        mavenLocal()
    }
}

def bintrayProps = new Properties()
File bintrayPropertiesFile = project.file("../bintray.properties")
if(bintrayPropertiesFile.exists()) {
    bintrayPropertiesFile.withInputStream { bintrayProps.load(it) }
}

bintray {
        user = bintrayProps.getProperty("bintray.user")
        key = bintrayProps.getProperty("bintray.key")
        publications = ["mavenPublication"]

        pkg {
                repo = "maven"
                name = "JonsInfra"
                licenses = ["BSD-2-Clause"]
                vcsUrl = "https://github.com/jpschewe/JonsInfra"
        }
}

task renderIndex(type: Copy) {
    from "docs"
    into "$buildDir/rendered-docs"
    // Substitute property tokens in files
    //expand(VERSION: project.version)
    expand(project.properties)
    filteringCharset = "UTF-8"
    
    outputs.upToDateWhen { false }
}
distTar.dependsOn renderIndex
distZip.dependsOn renderIndex

distributions {
    main {
        contents {
            from(jar) {
                into "lib"
            }
            from(javadocJar) {
                into "lib"
            }
            from(sourcesJar) {
                into "lib"
            }
            from(configurations.compileClasspath) {
                into "lib"
            }
            
            from(renderIndex) {
            }   
            from(javadoc) {
                into "docs/api"
            }
            from("$buildDir/reports/tests/") {
                into "docs/reports"
            }
            from("$buildDir/reports/spotbugs/") {
                into "docs/reports/spotbugs"
            }
            from("$buildDir/reports/cobertura/") {
                into "docs/reports/coverage"
            }
            from("LICENSE") {
            }
        }
    }
}
distZip.dependsOn test
distTar.dependsOn test

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ["alpha", "beta", "rc", "cr", "m", "preview", "b", "ea"].any { qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-+]*/
            }
            if (rejected) {
                selection.reject("Release candidate")
            }
        }
    }
}  

checkstyle {
    configDirectory = file("$projectDir")
    configFile = file("checkstyle.xml")
    showViolations = true
    ignoreFailures = true
    toolVersion = "8.18"
}

checkerFramework {
    checkers = [
        "org.checkerframework.checker.nullness.NullnessChecker"
    ]
    extraJavacArgs = [
        //"-AonlyDefs=^net\\.mtu\\.eggplant\\.(xml|util\\.sql|util\\.event|util\\.gui)",
        "-Awarns",  
        "-Xmaxwarns", "10000",
        "-AstubWarnIfNotFound"
    ]
}

def checker_dir = file("./checker/checker-framework")
if (checker_dir.exists()) {
    println("Using development version of checker in: " + checker_dir)
    
    dependencies {
        compileOnly files(file(checker_dir.toPath().resolve("checker/dist/checker-qual.jar")))
        testCompileOnly files(file(checker_dir.toPath().resolve("checker/dist/checker-qual.jar")))
        checkerFramework files(file(checker_dir.toPath().resolve("checker/dist/checker.jar")))
        
        compileOnly files(file(checker_dir.toPath().resolve("checker/dist/checker-util.jar")))
        testCompileOnly files(file(checker_dir.toPath().resolve("checker/dist/checker-util.jar")))        
    }
}
