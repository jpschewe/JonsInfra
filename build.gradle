// -*- java -*-

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
	    classpath group: 'com.cinnober.gradle', name: 'semver-git', version: '2.4.0'
    }
}    

plugins {
	id 'java-library'
	id 'distribution'
	id "com.dorongold.task-tree" version "1.3.1"
	id 'eclipse'
	id 'findbugs'
  	id "de.aaschmid.cpd" version "1.2"
	id "com.gorylenko.gradle-git-properties" version "2.0.0"
	id 'net.saliman.cobertura' version '2.6.0'
	id "com.jfrog.bintray" version "1.8.4"
  	id "maven-publish"
}


// needs to use old plugin mechanism otherwise I can't set the extra properties
ext.nextVersion = "patch"
ext.snapshotSuffix = "beta.<count>+g<sha><dirty>"
// optionally: ext.dirtyMarker = "-dirty" (default) replaces <dirty> in snapshotSuffix
// optionally: ext.gitDescribeArgs = '--match *[0-9].[0-9]*.[0-9]*' (default) or other arguments for git describe.
apply plugin: 'com.cinnober.gradle.semver-git'

repositories {
    mavenLocal()
    jcenter()
}

ext {
    slf4j_version = "1.7.26"
    junit_version = "5.4.0"
}

group = 'net.mtu.eggplant'

dependencies {
	api group: "org.slf4j", name: "slf4j-api", version: project.slf4j_version
	
	api group: "com.google.code.findbugs", name: "annotations", version: "3.0.1"
	api group: "com.google.code.findbugs", name: "jsr305", version: "3.0.1"
	
	implementation group: "commons-io", name: "commons-io", version: "2.6"
	
	implementation group: "xmlunit", name: "xmlunit", version: "1.6"
	
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: project.junit_version
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: project.junit_version
}

test {
	ignoreFailures Boolean.getBoolean("test.ignoreFailures") 
    useJUnitPlatform()
}

javadoc {
	failOnError = false
}


cpdCheck {
	// allow the build to continue, catch this in CI as warnings
	ignoreFailures = true
}

task sloccount(type: Exec) {
	commandLine 'cloc', '--by-file', '--xml', '--out', "$buildDir/reports/sloccount/cloc.xml", 'src'
}

findbugs {
	// allow the build to continue, catch this in CI as warnings
	ignoreFailures = true
	effort = "max"
	reportLevel = "low"
	excludeFilter = file("findbugs-filters.xml")
}

// some extra tasks so that we can generate html AND xml
task findbugsMainHtml(type: FindBugs, dependsOn: [classes]) {
	classes = project.sourceSets.main.output.classesDirs
	source = project.sourceSets.main.java.srcDirs
	classpath = sourceSets.main.runtimeClasspath
	reports {
	    html.enabled = true
	    xml.enabled = false
	}
}
distZip.dependsOn findbugsMainHtml
distTar.dependsOn findbugsMainHtml

task findbugsTestHtml(type: FindBugs, dependsOn: [testClasses]) {
	classes = project.sourceSets.test.output.classesDirs
	source = project.sourceSets.test.java.srcDirs
	classpath = sourceSets.test.runtimeClasspath
	reports {
	    html.enabled = true
	    xml.enabled = false
	}
}
distZip.dependsOn findbugsTestHtml
distTar.dependsOn findbugsTestHtml

gitProperties {
    gitPropertiesDir = "${buildDir}/resources/main/net/mtu/eggplant/util"
}

cobertura {
	coverageFormats = [ 'html', 'xml' ]
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
distZip.dependsOn sourcesJar
distTar.dependsOn sourcesJar

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
distZip.dependsOn javadocJar
distTar.dependsOn javadocJar

artifacts {
    archives sourcesJar
    archives javadocJar
}

def pomConfig = {
    licenses {
        license {
            name "2-Clause BSD License"
            url "https://opensource.org/licenses/BSD-2-Clause"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "jspchewe"
            name "Jon Schewe"
            email "jpschewe@mtu.net"
        }
    }

    scm {
        url "https://github.com/jpschewe/JonsInfra"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Useful utilities')
                root.appendNode('name', 'JonsInfra')
                root.appendNode('url', 'https://github.com/jpschewe/JonsInfra')
                root.children().last() + pomConfig
            }
        }
    }
 
   publications {
        mavenJava(MavenPublication) {
            from components.java
        }
   }
   repositories {
        mavenLocal()
    }
}

bintray {
	user = System.getProperty('bintray.user')
	key = System.getProperty('bintray.key')
	publications = ['mavenPublication']

	pkg {
		repo = 'maven'
		name = 'JonsInfra'
		licenses = ['BSD-2-Clause']
		vcsUrl = 'https://github.com/jpschewe/JonsInfra'
	}
}

task renderIndex(type: Copy) {
    from 'docs'
    into "$buildDir/rendered-docs"
    // Substitute property tokens in files
    //expand(VERSION: project.version)
    expand(project.properties)
    filteringCharset = 'UTF-8'
    
    outputs.upToDateWhen { false }
}
distTar.dependsOn renderIndex
distZip.dependsOn renderIndex

distributions {
    main {
    	contents {
			from(jar) {
				into 'lib'
			}
    		from(javadocJar) {
    			into 'lib'
			}
    		from(sourcesJar) {
    			into 'lib'
			}
            from(configurations.runtime) {
            	into 'lib'
           	}
    	    
    	    from(renderIndex) {
    	    }	
            from(javadoc) {
                into 'docs/api'
            }
            from("$buildDir/reports/tests/") {
            	into 'docs/reports'
        	}
            from("$buildDir/reports/findbugs/") {
            	into 'docs/reports/findbugs'
        	}
            from("$buildDir/reports/cobertura/") {
            	into 'docs/reports/coverage'
        	}
        	from('LICENSE') {
        	}
        }
    }
}
distZip.dependsOn test
distTar.dependsOn test
