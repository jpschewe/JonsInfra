<project name="infra" default="compile">

  <!-- properties -->
  <property name="temp.dir"  value="${basedir}/tmp" />
  
  <property name="instrument.dir"  value="instrumented" />

  <property name="build.dir" value="build"/>
  <property name="dist.dir" value="dist"/>

  <!--
  
    These properties control option settings on the Javac compiler when it
    is invoked using the <javac> task.
  
    compile.debug        Should compilation include the debug option?
  
    compile.deprecation  Should compilation include the deprecation option?
  
    compile.optimize     Should compilation include the optimize option?
  
  -->
  
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="false"/>
  
  <property name="cvs.root" value="/net/CVS-Repository" />
  <property name="cvs.module" value="infra" />

  <!-- used for building releases -->
  <property name="app.name"   value="JonsInfra" />
  <property name="app.version" value="0.5" />
  <property name="release.html.dir" value="/home/jpschewe/public_html/mtu.net/public_html" />
            
  <!-- used for *.javadoc -->
  <property name="local.java.packages" value="http://netserver.mn.mtu.net/package-docs/java" />
  <property name="nightly.html.dir" value="/net/package-docs/projects" />

  <path id="base.classpath">
    <pathelement location="${basedir}/src/"/>
    <pathelement location="${basedir}/lib/junit-3.8.jar"/>
    <pathelement location="${basedir}/lib/log4j-1.2.8.jar"/>
  </path>
  
  <!-- targets -->
  <target name="init">
    <tstamp />
  </target>

  <target name="NightlyTasks"
          description="Tasks to run on a regular basis in batch">
    <!-- delete the temp files -->
    <delete dir="${temp.dir}" />
    <mkdir dir="${temp.dir}" />    
    <!-- get the source out of cvs -->
    <cvs cvsRoot="${cvs.root}"
         package="${cvs.module}"
         dest="${temp.dir}"
         quiet="true" />

    <antcall target="nightly.javadoc">
      <param name="basedir" value="${temp.dir}/${cvs.module}" />
    </antcall>

    <!-- delete the temp files -->
    <delete dir="${temp.dir}" />
  </target>
  
  <!--  <target name="compile" depends="init,instrument,checkstyle">-->
  <target name="compile" depends="init,checkstyle">

    <mkdir dir="${build.dir}/classes"/>
    
    <!--    <javac srcdir="${instrument.dir}" destdir="${basedir}" >-->
    <javac srcdir="${basedir}/src"
           destdir="${build.dir}/classes"
           debug="${compile.debug}"
           deprecation="${compile.deprecation}"
           optimize="${compile.optimize}"
           >
      <classpath>
        <path refid="base.classpath"/>
      </classpath>
      <include name="net/**/*.java"/>
    </javac>
  </target>

<!--  <target name="instrument" depends="init">
    <java fork="no" classname="net.mtu.eggplant.assert.JonsAssert"
          taskname="assert" failonerror="true">
      <arg value="${basedir}/src/net/" />
      <arg value="-d ${basedir}/${instrument.dir}" />
    </java>
  </target>-->

  <target name="runtests"
          depends="compile">
    <java fork="yes"
          classname="junit.textui.TestRunner" 
          taskname="junit"
          failonerror="true"
          >
      <arg value="net.mtu.eggplant.util.test.AllTests"/>
      <classpath>
        <path refid="base.classpath"/>
        <pathelement location="${build.dir}/classes" />
      </classpath>
    </java>
  </target>

  <target name="clean"
         description="Delete old build and dist directories">
    <delete dir="${build.dir}"/>
  </target>

  <target name="dist"
          description="Make a release based on the working directory"
          depends="runtests"
          >

    <!-- clean out first to get clean source and good compile -->
    <antcall target="clean" />

    <delete dir="${release.html.dir}/${app.name}/${app.version}" />
    <mkdir dir="${release.html.dir}/${app.name}/${app.version}" />

    <!-- copy index.html, ChangeLog, lib to web directory -->
    <copy todir="${release.html.dir}/${app.name}/${app.version}"
          flatten="true">
      <fileset dir="${basedir}">
        <include name="ChangeLog" />
        <include name="doc/*" />
      </fileset>
      <filterset>
        <filter token="APP-VERSION" value="${app.version}" />
      </filterset>
    </copy>

    <copy todir="${release.html.dir}/${app.name}/${app.version}"
          flatten="true">
      <fileset dir="${basedir}">
        <include name="lib/*" />
      </fileset>
    </copy>


    <!-- zip source to web directory -->
    <zip destfile="${release.html.dir}/${app.name}/${app.version}/${app.name}-${app.version}-src.zip">
      <zipfileset dir="${basedir}"
                  prefix="${app.name}-${app.version}"
                  >
        <include name="src/**" />
        <include name="doc/**" />
        <include name="lib/**" />
        <include name="prj.el" />
        <include name="build.xml" />
        <include name="ChangeLog" />
      </zipfileset>
    </zip>

    <!-- now compile everything -->
    <antcall target="compile" />

    <!-- build the jar -->
    <jar jarfile="${release.html.dir}/${app.name}/${app.version}/${app.name}-${app.version}.jar"
         basedir="${basedir}/build/classes"
         index="true"
         />
    
    <!-- generate javadoc -->
    <!-- run javadoc on the source -->
    <mkdir dir="${release.html.dir}/${app.name}/${app.version}/api" />
    <javadoc packagenames="net.mtu.eggplant.*"
             sourcepath="${basedir}/src"
             use="true"
             splitindex="true"
             version="true"
             source="1.4"
             windowtitle="${app.name}-${app.version}"
             destdir="${release.html.dir}/${app.name}/${app.version}/api"
             additionalparam="-tag beaninfo:a:BeanInfo -tag test:a:Tests -tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
             >
        <classpath>
          <pathelement location="${basedir}/src/" />
          <path refid="base.classpath" />
        </classpath>
        <!-- core java -->
        <link href="http://java.sun.com/j2se/1.4/docs/api/" />

        <!-- junit -->
        <link href="http://www.junit.org/junit/javadoc/3.8" />

        <!-- log4j -->
        <link href="http://logging.apache.org/log4j/docs/api" />
      </javadoc>

    <echo message="Remember to sync out to mtu.net" />
  </target>

  <!-- ===================== Checkstyle =================== -->
  <taskdef resource="checkstyletask.properties">
    <classpath>
      <pathelement location="lib/ant/antlr.jar" />
      <pathelement location="lib/ant/checkstyle-3.3.jar" />
      <pathelement location="lib/ant/commons-beanutils.jar" />
      <pathelement location="lib/ant/commons-cli.jar" />
      <pathelement location="lib/ant/commons-collections.jar" />
      <pathelement location="lib/ant/commons-logging.jar" />
      <pathelement location="lib/ant/jakarta-regexp-1.3.jar" />
    </classpath>
  </taskdef>

  <target name="checkstyle"
          description="Check for code convention violations"
          >
    <mkdir dir="${build.dir}/classes" />

    <checkstyle config="checkstyle_checks.xml">
      <fileset dir="${basedir}/src">
        <include name="**/*.java" />
      </fileset>
    </checkstyle>
  </target>

  <target name="checkstyle.full"
          description="Check for code convention violations (more aggressive)"
          >
    <mkdir dir="${build.dir}/classes" />

    <checkstyle config="checkstyle_nightly_checks.xml"
                failOnViolation="false"
                >
      <fileset dir="${basedir}/src">
        <include name="**/*.java" />
      </fileset>
    </checkstyle>
  </target>
  
  <!-- Javadoc targets below here -->
  
  <!-- do a nightly build to my fileserver -->
  <target name="nightly.javadoc"
          depends="checkstyle.full"
          >
    <!-- run javadoc on the source -->
    <mkdir dir="${nightly.html.dir}/${app.name}" />
    <javadoc packagenames="net.mtu.eggplant.*"
             sourcepath="${basedir}/src"
             use="true"
             splitindex="true"
             version="true"
             windowtitle="${app.name}"
             destdir="${nightly.html.dir}/${app.name}"
             additionalparam="-tag beaninfo:a:BeanInfo -tag test:a:Tests -tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
             >
      <classpath>
        <path refid="base.classpath"/>
      </classpath>
      <!-- core java -->
      <link href="${local.java.packages}/jdk-1.4.0/api/"/>
      <!-- junit -->
      <link href="${local.java.packages}/junit-3.8/" />
      <!-- log4j -->
      <link href="${local.java.packages}/log4j-1.2.8/api" />
    </javadoc>
    
  </target>

</project>