<?xml version="1.0"?>
<project name="JonsInfra" default="default">

  <!-- load build specific properties first -->
  <property file="build.properties" />

  <!-- basic properties for directories and the like -->
  <property name="dir.src"     value="src" />
  <property name="dir.lib"     value="lib" />
  <property name="dir.build"   value="${basedir}/build" />
  <property name="dir.inst"    value="${dir.build}/instrumented" />
  <property name="dir.classes" value="${dir.build}/classes" />
  <property name="dir.api"     value="${dir.build}/api" />
  <property name="dir.test"    value="test" />
  <property name="dir.bin"     value="${dir.build}/bin" />
  <property name="dir.dist"    value="${dir.build}/dist" />
  <property name="dir.reports" value="${dir.build}/reports" />
  <property name="dir.emma-instr"   value="${dir.build}/emma-instr" />
  <property name="dir.coverage" value="${dir.build}/coverage" />
  
  <!-- here in case a version is required as well -->
  <property name="app.version" value="0.7" />
  <property name="app.name"    value="${ant.project.name}" /> 

  <!-- name of main class for run -->
  <property name="class.main"  value="none" />
  <property name="class.main.maxmemory"  value="512M" />

  <!-- what level of javadoc should be generated -->
  <property name="javadoc.access" value="protected" />

  <!-- file for checkstyle -->
  <property name="checkstyle" value="checkstyle.xml" />
  <property name="checkstyle.strict" value="checkstyle-strict.xml" />

  <!-- compile options, may be overriden in other targets -->
  <property name="compile.debug" value="true" />
  <property name="compile.optimize" value="false" />
  <property name="compile.deprecation" value="true" />
                                      
  <!-- file for emacs tags tables -->
  <property name="tagstable" value="${dir.src}/TAGS" />

  <property name="release.html.dir" value="/home/jpschewe/public_html/mtu.net/public_html" />

  <!-- Base/default classpath; if you don't run inside ant, copy this -->
  <path id="classpath.base">
    <pathelement location="${basedir}/lib/commons-logging-1.0.3.jar"/>
    <pathelement location="${basedir}/lib/log4j-1.2.14.jar"/>
  </path>
  

  <!-- Build, Run and Test classpaths -->
  <path id="classpath.build">
    <pathelement location="${dir.classes}" />
    <path refid="classpath.base" />
  </path>
  <path id="classpath.run" refid="classpath.build" />
  <path id="classpath.test">
    <pathelement location="${dir.emma-instr}"/>
    <path refid="classpath.base"/>

    <pathelement location="${dir.lib}/test/junit-3.8.1.jar"/>
  </path>

  <!-- ==================== Emma (Code coverage) ==================== -->
  <property name="emma.dir" value="${dir.lib}/emma" />
  <path id="emma.lib" >
    <pathelement location="${emma.dir}/emma.jar" />
    <pathelement location="${emma.dir}/emma_ant.jar" />
  </path>
  
  <target name="with.emma">
    <mkdir dir="${dir.coverage}" />
    <property name="emma.enabled" value="true"/>
    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>
    <property name="out.instr.dir" value="${dir.emma-instr}" />
    <path id="classpath.run">
      <pathelement location="${out.instr.dir}" />	
      <path refid="classpath.build"/>
      <path refid="emma.lib"/>
    </path>    
    <path id="classpath.test">
      <pathelement location="${out.instr.dir}" />	
      <path refid="classpath.build"/>
      <path refid="emma.lib"/>
    </path>    
  </target>
  
  <target name="emma.report">
    <taskdef resource="emma_ant.properties" classpathref="emma.lib"/>
    <emma>
      <report sourcepath="${dir.src}" >
        <fileset dir="${dir.coverage}" >
          <include name="*.emma" />
        </fileset>
        <html outfile="${dir.reports}/coverage.html" />
      </report>
    </emma>
    <echo message="See ${dir.reports}/coverage.html for the coverage report"/>
  </target>

  <target name="emma.instr"
    depends="compile"
    if="emma.enabled"
    >
    <emma>
      <instr instrpath="${dir.classes}"
        destdir="${out.instr.dir}"
        metadatafile="${dir.coverage}/metadata.emma"
        merge="true"
        >
        <filter includes="net.mtu.eggplant.*"/>
        <filter excludes="*Test"/>
      </instr>
    </emma>
  </target>
  
  <!-- ==================== Setup/Prepare/Clean ==================== -->

  <!-- Basic target for preparing to build / compile / run / test / etc -->
  <target name="init">
    <tstamp />
    <mkdir dir="${dir.build}" />
    <mkdir dir="${dir.classes}" />
    <mkdir dir="${dir.bin}" />
    <mkdir dir="${dir.build}/test-results"/>
    <mkdir dir="${dir.reports}"/>
  </target>

  <target name="clean"
          description="Clean up directories; remove ALL generated files">
    <delete dir="${dir.build}" />
  </target>

  <!-- ==================== DEFAULT ==================== -->
  <target name="default"
          description="Default target"
          depends="init,compile,checkstyle,jtags" />

  <!-- ==================== Compile ==================== -->
  <target name="compile"
          description="Compile java to class files"
          depends="init">

    <!-- compile - into the build directory -->
    <echo level="info" taskname="compile" 
          message="Compiling sources from: '${dir.src}'"/>
    <javac srcdir="${dir.src}"
           excludes="**/scratch/*.java"
           destdir="${dir.classes}"
           debug="${compile.debug}"
           optimize="${compile.optimize}"
           deprecation="${compile.deprecation}"
           >
      <classpath refid="classpath.base" />
      <compilerarg value="-Xlint:unchecked"/>
    </javac>

    <!-- copy any resource (non java/class) files -->
    <copy todir="${dir.classes}">
      <fileset dir="${dir.src}">
        <exclude name="**/TAGS" />
        <exclude name="**/*.java" />
        <exclude name="**/*.class" />
        <exclude name="**/*.html" />
      </fileset>
    </copy>

    <!-- build scripts -->
    <antcall target="-buildscripts">
      <param name="-scripts.dir" value="${dir.bin}" />
      <param name="-scripts.root" value=".." />
      <reference torefid="-scripts.path" refid="classpath.build" />
    </antcall>
  </target>

  <target name="compile.test" depends="init,compile"
    description="Compile Java test sources">

    <!-- Copy static files from external dependencies as needed -->
    <copy todir="${dir.classes}">
      <fileset dir="${dir.test}">
        <exclude name="**/*.java" />
      </fileset>
    </copy>
    
    <!-- Compile Java classes as necessary -->
    <javac srcdir="test"
      destdir="${dir.classes}"
      debug="${compile.debug}"
      deprecation="${compile.deprecation}"
      optimize="${compile.optimize}"
      >
      <classpath refid="classpath.test"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>
  
  <!-- ==================== Tests using JUnit ==================== -->
  <target name="test"
          depends="checkstyle.strict,-junit"
          description="Run the unit tests and format the results">
    <condition property="test.halt">
      <and>
        <isset property="test.failed" />
        <!-- isset property="test.halt-if-failed" / -->
      </and>
    </condition>
    <fail if="test.halt">
      JUnit tests failed.  Check log or reports for details.
    </fail>
  </target>

  <target name="test.single"
          depends="-junit.single,checkstyle.strict"
          description="Run the unit tests">
    <condition property="test.halt">
      <and>
        <isset property="test.failed" />
        <!-- isset property="test.halt-if-failed" / -->
      </and>
    </condition>
    <fail if="test.halt" message="JUnit tests failed">
 ** One or more JUnit tests failed.
    </fail>
  </target>
  
  <target name="-junit"
          depends="emma.instr,compile.test"
          description="Run unit tests using JUnit"
          >
    <junit dir="${dir.build}"
      haltonfailure="false"
      fork="true"
      showoutput="true"
      failureproperty="test.failed"
      >
      <jvmarg value="-Demma.coverage.out.file=${dir.coverage}/coverage.emma"/>
      <jvmarg value="-Demma.coverage.out.merge=true"/>
      <classpath refid="classpath.test" />
      <formatter type="brief" usefile="false"/>
      <sysproperty key="java.awt.headless" value="true" />
      <batchtest todir="${dir.build}/test-results" unless="junit.test.class">
        <fileset dir="${dir.test}">
          <include name="**/*.java" />
        </fileset>
      </batchtest>
    </junit>
  </target>

  <target name="-junit.single"
          depends="compile.test"
          description="Run unit tests using JUnit; specify junit.test.class for single testcase."
          >
    <junit dir="${dir.build}"
      haltonfailure="false"
      fork="true"
      showoutput="true"
      failureproperty="test.failed"
      >
      <classpath refid="classpath.test" />
      <formatter type="brief" usefile="false"/>
      <sysproperty key="java.awt.headless" value="true" />
      <test name="${junit.test.class}" if="junit.test.class"
            todir="${dir.build}/test-results" />
    </junit>
  </target>
  

  <!-- ==================== Run ! ==================== -->
  <target name="run"
          depends="compile"
          description="Run the application"
          >
    <java fork="yes"
          classname="${class.main}"
          taskname="run"
          dir="${dir.build}"
          maxmemory="${class.main.maxmemory}"
          >
      <classpath refid="classpath.run" />
    </java>
  </target>

  <!-- ==================== Profile ! ==================== -->
  <target name="profile"
          depends="compile"
          description="Profile the application"
          >
    <java fork="yes"
          classname="${class.main}"
          taskname="profile"
          dir="${dir.build}"
          >
      <classpath refid="classpath.run" />
      <jvmarg value="-Xrunhprof:cpu=samples,depth=15,thread=y" />
    </java>
  </target>

  <!-- ==================== Distribution ==================== -->
  <target name="dist"
          description="Create complete distribution file(s)"
          depends="clean">
    <!-- ensure a few things are set properly for a distribution -->
    <antcall target="-dist.real">
      <param name="javadoc.access" value="protected" />
      <param name="compile.debug" value="false" />
      <param name="compile.optimize" value="true" />
    </antcall>
  </target>

  <!-- do real work of dist target -->
  <target name="-dist.real"
          depends="javadoc,compile">

    <!-- eventually should set or generate this, perhaps from BuildNumber task -->
    <property name="dist.jar" value="${app.name}-${app.version}.jar" />

    <!-- JAR-up all of our compiled classes -->
    <jar jarfile="${dir.build}/${dist.jar}"
         index="true">
      <fileset dir="${dir.classes}">
         <exclude name="**/test/*" />
      </fileset>
    </jar>

    <!-- copy index.html, ChangeLog, lib to web directory -->
    <mkdir dir="${dir.build}/docs" />
    <copy todir="${dir.build}/docs"
          flatten="true">
      <fileset dir="${basedir}">
        <include name="ChangeLog" />
        <include name="docs/*" />
      </fileset>
      <filterset>
        <filter token="APP-VERSION" value="${app.version}" />
      </filterset>
    </copy>
    
    <!-- build distribution-friendly scripts -->
    <path id="dist.classpath">
      <path refid="classpath.base" />
      <pathelement location="${dist.jar}" />
    </path>
    <antcall target="-buildscripts">
      <param name="-scripts.dir" value="${dir.dist}/bin" />
      <param name="-scripts.root" value="." />
      <reference torefid="-scripts.path" refid="dist.classpath" />
    </antcall>

    <!-- create zip files of the source and distribution directories -->
    <zip destfile="${dir.build}/${app.name}-${app.version}.zip">
      <zipfileset dir="${dir.dist}" />
      <zipfileset file="${dir.build}/${dist.jar}" />
      <zipfileset dir="lib" prefix="lib" excludes="ant/**" />
      <zipfileset dir="docs" prefix="docs" />
      <zipfileset dir="${dir.api}" prefix="docs/api" />
    </zip>
    <zip destfile="${dir.build}/${app.name}-${app.version}-src.zip">
      <zipfileset dir="${dir.src}" excludes="${tagstable}" />
    </zip>
  </target>


  <target name="release"
          description="Make a release based on the working directory"
          depends="clean"
          >
    <delete dir="${release.html.dir}/${app.name}/${app.version}" />
    <mkdir dir="${release.html.dir}/${app.name}/${app.version}" />

    <!-- ensure a few things are set properly for a distribution -->
    <antcall target="-release.real">
      <param name="javadoc.access" value="protected" />
      <param name="compile.debug" value="false" />
      <param name="compile.optimize" value="true" />
      <param name="dir.api" value="${release.html.dir}/${app.name}/${app.version}/api" />
    </antcall>
  </target>

  <target name="-release.real"
    depends="compile,javadoc">

    <!-- copy index.html, ChangeLog, lib to web directory -->
    <copy todir="${release.html.dir}/${app.name}/${app.version}"
          flatten="true">
      <fileset dir="${basedir}">
        <include name="ChangeLog" />
        <include name="docs/*" />
      </fileset>
      <filterset>
        <filter token="APP-VERSION" value="${app.version}" />
      </filterset>
    </copy>

    <copy todir="${release.html.dir}/${app.name}/${app.version}"
          flatten="true">
      <fileset dir="${basedir}">
        <include name="lib/*" />
        <exclude name="lib/ant" />
      </fileset>
    </copy>


    <!-- zip source to web directory -->
    <zip destfile="${release.html.dir}/${app.name}/${app.version}/${app.name}-${app.version}-src.zip">
      <zipfileset dir="${basedir}"
                  prefix="${app.name}-${app.version}"
                  >
        <include name="src/**" />
        <include name="docs/**" />
        <include name="lib/**" />
        <include name="prj.el" />
        <include name="build.xml" />
        <include name="ChangeLog" />
      </zipfileset>
    </zip>

    <!-- build the jar -->
    <jar jarfile="${release.html.dir}/${app.name}/${app.version}/${app.name}-${app.version}.jar"
         basedir="${basedir}/build/classes"
         index="true"
         />
    
    <echo message="Remember to sync out to mtu.net" />
  </target>
  
  <!-- ==================== JavaDoc ==================== -->
  <target name="-javadoc.check">
    <!-- set javadoc.access in your build.properties files to
    change level of javadoc created (e.g. private, etc) -->
    <condition property="javadoc.uptodate">
      <and>
        <available file="${dir.api}/index.html" />
        <uptodate targetfile="${dir.api}/index.html">
          <srcfiles dir="${dir.src}" includes="**/*.java" />
        </uptodate>
      </and>
    </condition>
  </target>

  <target name="javadoc"
    description="Create Javadoc API documentation"
    depends="-javadoc.check"
    unless="javadoc.uptodate">
    <mkdir dir="${dir.api}" />
    <javadoc sourcepath="${dir.src}"
             destdir="${dir.api}"
             packagenames="*"
             excludepackagenames="**/test"
             windowtitle="${app.name}"
             overview="${dir.src}/overview.html"
             access="${javadoc.access}"
             splitindex="true"
             additionalparam="-tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator"
             >
      <classpath refid="classpath.base" />
      <!-- core java -->
      <link href="http://java.sun.com/j2se/1.4/docs/api/" />

      <!-- junit -->
      <link href="http://www.junit.org/junit/javadoc/3.8.1" />
    </javadoc>
  </target>

  <!-- ==================== Emacs Tags ==================== -->
  <!-- set jtags.executable and jtags.arguments in your 
     - build.properties something like this:
     -    jtags.executable=bash
     -    jtags.arguments=-c jtags
     - Note that ANT is somewhat too smart wrt quotes.
    -->
  <condition property="jtags.uptodate">
    <and>
      <available file="${tagstable}" />
      <uptodate targetfile="${tagstable}">
        <srcfiles dir="${dir.src}" includes="**/*.java" />
      </uptodate>
    </and>
  </condition>

  <target name="jtags"
          description="Build an Emacs tags table file"
          if="jtags.executable"
          unless="jtags.uptodate"
          >
    <exec taskname="jtags" dir="${dir.src}" executable="${jtags.executable}">
       <arg line="${jtags.arguments}" />
    </exec>
  </target>

  <!-- ==================== Design By Contract (DBC) ==================== -->
  <!-- instrument code for DBC checks --> 
  <target name="instrument"
          description="Instrument code for DBC checks"
          depends="init"
          >
    <mkdir dir="${dir.inst}" />
    <java fork="yes"
          classname="net.mtu.eggplant.dbc.JonsAssert"
	  taskname="instrument"
          failonerror="true"
          >
      <arg value="-d ${dir.inst}" />
      <!-- for deugging <arg value="-prettyOutput" /> -->
      <arg value="${dir.src}" />
      <classpath refid="classpath.base" />
    </java>
  </target>

  <!-- compile.dbc -->
  <target name="compile.dbc"
          description="Compile everything with DBC checks" 
          depends="instrument">
    <antcall target="compile">
      <param name="dir.src" value="${dir.inst}"/>
    </antcall>
  </target>

  <!-- run.dbc -->
  <target name="run.dbc"
          depends="compile.dbc,run"
          description="Run the application with DBC checks"
          />

  <!-- test.dbc -->
  <target name="test.dbc"
          depends="compile.dbc,test"
          description="Run unit tests under DBC"
          />
  
  <!-- ==================== Checkstyle ==================== -->
  <taskdef resource="checkstyletask.properties">
    <classpath>
      <pathelement location="${dir.lib}/ant/antlr-2.7.6.jar" />
      <pathelement location="${dir.lib}/ant/checkstyle-4.2.jar" />
      <pathelement location="${dir.lib}/ant/commons-beanutils-core.jar" />
      <pathelement location="${dir.lib}/ant/commons-cli-1.0.jar" />
      <pathelement location="${dir.lib}/ant/commons-collections.jar" />
      <pathelement location="${dir.lib}/ant/commons-logging.jar" />
    </classpath>
  </taskdef>

  <!-- "normal" checkstyle -->
  <target name="checkstyle"
          description="Check for code convention violations"
          depends="init">
    <echo level="info" taskname="checkstyle"
          message="Checking code style with config: '${checkstyle}'"/>
    <checkstyle config="${checkstyle}" failOnViolation="false">
      <fileset dir="${dir.src}">
        <include name="**/*.java" />
      </fileset>
    </checkstyle>
  </target>

  <!-- strict checkstyle -->
  <target name="checkstyle.strict">
    <antcall target="checkstyle">
      <param name="checkstyle" value="${checkstyle.strict}"/>
    </antcall>
  </target>

  <!-- ============ Nightly Build/Check/Test/Build/Report/Etc ============ -->
  <target name="nightly.build"
          description="Tasks to run during nightly build"
          depends="clean,javadoc,checkstyle.strict,test" />

  <!-- ==================== SECONDARY TARGETS ==================== -->
  <!-- build scripts to run the application -->
  <target name="-buildscripts.check">
    <!-- somewhat hokey, in that we only look at one of the scripts generated -->
    <uptodate property="-scripts.uptodate"
              targetfile="${-scripts.dir}/${app.name}.sh">
      <srcfiles dir="${basedir}" includes="run*.t,${ant.file}" />
    </uptodate>
  </target>
            
  <target name="-buildscripts" 
          depends="-buildscripts.check"
          unless="-scripts.uptodate">
    <!-- JavaDOME  -->
    <mkdir dir="${-scripts.dir}" />

    <pathconvert targetos="unix"
                 property="classpath.unix"
                 refid="-scripts.path">
      <map from="${basedir}" to="${-scripts.root}" />
    </pathconvert>
    <pathconvert targetos="windows"
                 property="classpath.windows"
                 refid="-scripts.path">
      <map from="${basedir}" to="${-scripts.root}" />
    </pathconvert>

    <!--
    <copy file="run.sh.t" tofile="${-scripts.dir}/${app.name}.sh" overwrite="true">
      <filterset>
        <filter token="CLASSPATH" value="${classpath.unix}" />
        <filter token="CLASSNAME" value="${class.main}" />
        <filter token="JAVA_ARGS" value="" />
      </filterset>
    </copy>
    <copy file="run.bat.t" tofile="${-scripts.dir}/${app.name}.bat" overwrite="true">
      <filterset>
        <filter token="CLASSPATH" value="${classpath.windows}" />
        <filter token="CLASSNAME" value="${class.main}" />
        <filter token="JAVA_ARGS" value="" />
      </filterset>
    </copy>
    -->
    
  </target>

</project>
