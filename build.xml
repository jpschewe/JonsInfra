<?xml version="1.0"?>
<project name="JonsInfra" default="default">

	<!-- load build specific properties first -->
	<property file="build.properties" />

	<!-- basic properties for directories and the like -->
	<property name="dir.src" value="${basedir}/src" />
	<property name="dir.lib" value="${basedir}/lib" />
	<property name="dir.build" value="${basedir}/build" />
	<property name="dir.inst" value="${dir.build}/instrumented" />
	<property name="dir.classes" value="${dir.build}/classes/main" />
	<property name="dir.classes.test" value="${dir.build}/classes/test" />
	<property name="dir.test" value="${basedir}/test" />
	<property name="dir.bin" value="${dir.build}/bin" />
	<property name="dir.dist" value="${dir.build}/dist" />
	<property name="dir.reports" value="${dir.build}/docs/reports" />
	<property name="dir.coverage" value="${dir.build}/coverage" />

	<!-- here in case a version is required as well -->
	<property name="app.version" value="1.5" />
	<property name="app.name" value="${ant.project.name}" />

	<!-- name of main class for run -->
	<property name="class.main" value="none" />
	<property name="class.main.maxmemory" value="512M" />

	<!-- what level of javadoc should be generated -->
	<property name="javadoc.access" value="protected" />

	<!-- compile options, may be overriden in other targets -->
	<property name="compile.debug" value="true" />
	<property name="compile.optimize" value="false" />
	<property name="compile.deprecation" value="true" />

	<property environment="env" />
	<property name="release.html.dir" value="/home/jpschewe/public_html" />

	<property name="findbugs.home" value="${dir.lib}/findbugs-2.0.0" />
	<property name="dir.lib.findbugs" value="${findbugs.home}/lib" />

	<import file="${basedir}/buildscript-imports.xml" />

	<taskdef name="findbugs" classpath="${dir.lib.findbugs}/findbugs-ant.jar" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" />

	<taskdef name="one-jar" classname="com.simontuffs.onejar.ant.OneJarTask">
		<classpath>
			<pathelement location="${dir.lib}/ant/one-jar-ant-task-0.96-jps.jar" />
		</classpath>
	</taskdef>

	<condition property="tools.jar" value="/System/Library/Frameworks/JavaVM.framework/Versions/${ant.java.version}/Classes/classes.jar" else="${java.home}/../lib/tools.jar">
		<os family="mac" />
	</condition>

	<!-- Base/default classpath; if you don't run inside ant, copy this -->
	<path id="classpath.base">
		<pathelement location="${basedir}/lib/slf4j-api-1.5.11.jar" />


		<pathelement location="${tools.jar}" />

		<path refid="cobertura.classpath" />

		<!-- findbugs annotations -->
		<pathelement location="${dir.lib.findbugs}/annotations.jar" />
		<pathelement location="${dir.lib.findbugs}/jsr305.jar" />
	</path>


	<!-- Build, Run and Test classpaths -->
	<path id="classpath.build">
		<pathelement location="${dir.classes}" />
		<path refid="classpath.base" />
	</path>
	<path id="classpath.run">
		<path refid="classpath.build" />

		<pathelement location="${dir.classes}" />

		<!-- logging jars for running applications -->
		<pathelement location="${dir.lib}/test/slf4j-simple-1.5.11.jar" />
	</path>
	<path id="classpath.test">
		<path refid="classpath.run" />

		<pathelement location="${dir.classes.test}" />

		<pathelement location="${dir.lib}/test/junit-4.5.jar" />
	</path>

	<!-- ==================== Code coverage ==================== -->
	<path id="cobertura.classpath">
		<fileset dir="${dir.lib}/cobertura">
			<include name="*.jar" />
		</fileset>
	</path>
	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

	<target name="coverage.report" description="Generate the coverage report">
		<mkdir dir="${dir.reports}/coverage" />
		<cobertura-report format="html" destdir="${dir.reports}/coverage" datafile="${dir.coverage}/cobertura.ser">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
		<cobertura-report format="xml" destdir="${dir.reports}/coverage" datafile="${dir.coverage}/cobertura.ser">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>

		<echo message="See ${dir.reports}/coverage/index.html for the coverage report" />
	</target>

	<target name="coverage.instr" depends="compile" description="Instrument files for code coverage">
		<mkdir dir="${dir.coverage}" />
		<delete file="${dir.coverage}/cobertura.ser" />

		<cobertura-instrument datafile="${dir.coverage}/cobertura.ser">
			<fileset dir="${dir.classes}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<!-- ==================== Setup/Prepare/Clean ==================== -->

	<!-- Basic target for preparing to build / compile / run / test / etc -->
	<target name="init">
		<echo level="info" message="java home: ${java.home}" />
		<echo level="info" message="java version: ${ant.java.version}" />
		<echo level="info" message="tools jar is in ${tools.jar}"/>

		<tstamp />
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.classes}" />
		<mkdir dir="${dir.classes.test}" />
		<mkdir dir="${dir.bin}" />
		<mkdir dir="${dir.build}/test-results" />
		<mkdir dir="${dir.reports}" />
	</target>

	<target name="clean" description="Clean up directories; remove ALL generated files">
		<delete dir="${dir.build}" />
	</target>

	<!-- ==================== DEFAULT ==================== -->
	<target name="default" description="Default target" depends="init,compile,checkstyle" />

	<!-- ==================== Compile ==================== -->
	<target name="compile" description="Compile java to class files" depends="init">
		<!-- compile - into the build directory -->
		<echo level="info" taskname="compile" message="Compiling sources from: '${dir.src}'" />
		<javac srcdir="${dir.src}" excludes="**/scratch/*.java" destdir="${dir.classes}" debug="${compile.debug}" optimize="${compile.optimize}" deprecation="${compile.deprecation}">
			<classpath refid="classpath.base" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<!-- copy any resource (non java/class) files -->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.src}">
				<exclude name="**/TAGS" />
				<exclude name="**/*.java" />
				<exclude name="**/*.class" />
				<exclude name="**/*.html" />
			</fileset>
		</copy>

		<buildscript-one-jar scripts.dir="${dir.bin}" src.dir="${dir.classes}" scripts.path="classpath.run" script.name="check-schema" class.main="net.mtu.eggplant.app.SchemaValidator" />

		<buildscript-one-jar scripts.dir="${dir.bin}" src.dir="${dir.classes}" scripts.path="classpath.run" script.name="timeconvert" class.main="net.mtu.eggplant.app.TimeConvert" />

	</target>

	<target name="compile.test" depends="init,compile" description="Compile Java test sources">

		<!-- Copy static files from external dependencies as needed -->
		<copy todir="${dir.classes.test}">
			<fileset dir="${dir.test}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<!-- Compile Java classes as necessary -->
		<javac srcdir="test" destdir="${dir.classes.test}" debug="${compile.debug}" deprecation="${compile.deprecation}" optimize="${compile.optimize}">
			<classpath refid="classpath.test" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<!-- ==================== Tests using JUnit ==================== -->
	<target name="test.all" depends="test" description="Run all tests" />

	<target name="test" depends="checkstyle,compile.test,coverage.instr" description="Run the unit tests and format the results">
		<mkdir dir="${dir.build}/test-results" />

		<junit dir="${dir.build}" haltonfailure="false" fork="true" showoutput="true">
			<sysproperty key="net.sourceforge.cobertura.datafile" value="${dir.coverage}/cobertura.ser" />
			<classpath refid="classpath.test" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest todir="${dir.build}/test-results">
				<fileset dir="${dir.test}">
					<include name="**/*.java" />
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="test.single" depends="compile.test,checkstyle" description="Run a single unit test specified by junit.test.class property.">
		<junit fork="yes" haltonfailure="false" dir="${dir.build}">
			<classpath>
				<path refid="classpath.test" />
			</classpath>
			<formatter type="plain" usefile="false" />
			<test name="${junit.test.class}" if="junit.test.class" todir="${dir.build}/test-results" />
		</junit>
	</target>

	<target name="test.report" description="Generate the test report">
		<mkdir dir="${dir.reports}/junit" />
		<junitreport todir="${dir.reports}">
			<fileset dir="${dir.build}/test-results">
				<include name="**/*.xml" />
			</fileset>
			<report format="frames" todir="${dir.reports}/junit" />
		</junitreport>
		<echo message="See ${dir.reports}/junit/index.html to see the unit test results" />
	</target>


	<!-- ==================== Run ! ==================== -->
	<target name="run" depends="compile" description="Run the application">
		<java fork="yes" classname="${class.main}" taskname="run" dir="${dir.build}" maxmemory="${class.main.maxmemory}">
			<classpath refid="classpath.run" />
		</java>
	</target>

	<!-- ==================== Profile ! ==================== -->
	<target name="profile" depends="compile" description="Profile the application">
		<java fork="yes" classname="${class.main}" taskname="profile" dir="${dir.build}">
			<classpath refid="classpath.run" />
			<jvmarg value="-Xrunhprof:cpu=samples,depth=15,thread=y" />
		</java>
	</target>

	<!-- ==================== Distribution ==================== -->
	<target name="dist" description="Create complete distribution file(s)">
		<!-- ensure things are clean before testing -->
		<antcall target="clean" />
		<!-- make sure the tests pass -->
		<antcall target="test" />

		<!-- create & copy the reports to the side so that the clean doesn't remove it-->
		<antcall target="coverage.report" />
		<antcall target="test.report" />
		<mkdir dir="dist-save" />
		<copy todir="dist-save">
			<fileset dir="${dir.reports}" />
		</copy>

		<!-- clean everything out before a distribution is made -->
		<antcall target="clean" />

		<!-- copy the reports back -->
		<mkdir dir="${dir.reports}" />
		<copy todir="${dir.reports}">
			<fileset dir="dist-save" />
		</copy>
		<delete dir="dist-save" />

		<!-- ensure a few things are set properly for a distribution -->
		<antcall target="-dist.real">
			<param name="javadoc.access" value="protected" />
			<param name="compile.debug" value="false" />
			<param name="compile.optimize" value="true" />
		</antcall>
	</target>

	<!-- do real work of dist target -->
	<target name="-dist.real" depends="javadoc,compile">
		<mkdir dir="${dir.dist}/lib" />

		<!-- eventually should set or generate this, perhaps from BuildNumber task -->
		<property name="dist.jar" value="${app.name}-${app.version}.jar" />

		<!-- JAR-up all of our compiled classes -->
		<jar jarfile="${dir.dist}/lib/${dist.jar}" index="true">
			<fileset dir="${dir.classes}">
				<exclude name="**/test/*" />
			</fileset>
		</jar>

		<!-- copy index.html, ChangeLog, lib to docs directory -->
		<mkdir dir="${dir.dist}/docs" />
		<copy todir="${dir.dist}" flatten="true">
			<fileset dir="${basedir}">
				<include name="ChangeLog" />
				<include name="LICENSE" />
				<include name="docs/*" />
			</fileset>
			<filterset>
				<filter token="APP-VERSION" value="${app.version}" />
			</filterset>
		</copy>

		<!-- copy reports -->
		<mkdir dir="${dir.dist}/docs" />
		<copy todir="${dir.dist}/docs">
			<fileset dir="${dir.build}/docs" />
		</copy>

		<!-- create zip files of the source and distribution directories -->
		<zip destfile="${dir.build}/${app.name}-${app.version}.zip">
			<zipfileset dir="${dir.dist}" />
			<zipfileset file="${dir.build}/${dist.jar}" />
			<zipfileset dir="lib" prefix="lib" excludes="ant/**,cobertura/**,test/**" />
			<zipfileset dir="${dir.build}/docs" prefix="docs" />
		</zip>
		<zip destfile="${dir.build}/${app.name}-${app.version}-src.zip">
			<zipfileset dir="${dir.src}" />
		</zip>
		<move file="${dir.build}/${app.name}-${app.version}.zip" todir="${dir.dist}" />
		<move file="${dir.build}/${app.name}-${app.version}-src.zip" todir="${dir.dist}" />
	</target>


	<target name="release" description="Make a release based on the working directory" depends="dist">
		<delete dir="${release.html.dir}/${app.name}/${app.version}" />
		<mkdir dir="${release.html.dir}/${app.name}/${app.version}" />

		<copy todir="${release.html.dir}/${app.name}/${app.version}">
			<fileset dir="${dir.dist}" />
		</copy>
	</target>

	<!-- ==================== JavaDoc ==================== -->
	<target name="-javadoc.check">
		<!-- set javadoc.access in your build.properties files to
    change level of javadoc created (e.g. private, etc) -->
		<condition property="javadoc.uptodate">
			<and>
				<available file="${dir.build}/docs/api/index.html" />
				<uptodate targetfile="${dir.build}/docs/api/index.html">
					<srcfiles dir="${dir.src}" includes="**/*.java" />
				</uptodate>
			</and>
		</condition>
	</target>

	<target name="javadoc" description="Create Javadoc API documentation" depends="-javadoc.check" unless="javadoc.uptodate">
		<mkdir dir="${dir.build}/docs/api" />
		<javadoc sourcepath="${dir.src}" destdir="${dir.build}/docs/api" packagenames="*" excludepackagenames="**/test" windowtitle="${app.name}" overview="${dir.src}/overview.html" access="${javadoc.access}" splitindex="true" additionalparam="-tag pre:cm:PreConditions -tag post:cm:PostConditions -tag invariant:tc:Invariants -breakiterator">
			<classpath refid="classpath.base" />
			<!-- core java -->
			<link href="http://java.sun.com/j2se/1.5.0/docs/api/" />

			<!-- junit -->
			<link href="http://www.junit.org/junit/javadoc/4.5/" />

			<!-- SLF4J -->
			<link href="http://www.slf4j.org/apidocs/" />

		</javadoc>
	</target>

	<!-- ==================== Design By Contract (DBC) ==================== -->
	<!-- instrument code for DBC checks -->
	<target name="instrument" description="Instrument code for DBC checks" depends="init">
		<mkdir dir="${dir.inst}" />
		<java fork="yes" classname="net.mtu.eggplant.dbc.JonsAssert" taskname="instrument" failonerror="true">
			<arg value="-d ${dir.inst}" />
			<!-- for deugging <arg value="-prettyOutput" /> -->
			<arg value="${dir.src}" />
			<classpath refid="classpath.base" />
		</java>
	</target>

	<!-- compile.dbc -->
	<target name="compile.dbc" description="Compile everything with DBC checks" depends="instrument">
		<antcall target="compile">
			<param name="dir.src" value="${dir.inst}" />
		</antcall>
	</target>

	<!-- run.dbc -->
	<target name="run.dbc" depends="compile.dbc,run" description="Run the application with DBC checks" />

	<!-- test.dbc -->
	<target name="test.dbc" depends="compile.dbc,test" description="Run unit tests under DBC" />

	<!-- ==================== Checkstyle ==================== -->
	<taskdef resource="checkstyletask.properties">
		<classpath>
			<pathelement location="${dir.lib}/ant/checkstyle-all-5.0.jar" />
		</classpath>
	</taskdef>

	<!-- "normal" checkstyle -->
	<target name="checkstyle" description="Check for code convention violations" depends="init">
		<checkstyle config="${basedir}/checkstyle.xml" failOnViolation="false">
			<fileset dir="${dir.src}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${dir.test}">
				<include name="**/*.java" />
			</fileset>
			<formatter type="plain" />
			<formatter type="xml" toFile="${dir.build}/checkstyle_report.xml" />
		</checkstyle>
		<mkdir dir="${dir.reports}/checkstyle" />
	</target>

	<!-- ============ Nightly Build/Check/Test/Build/Report/Etc ============ -->
	<target name="continuous" description="Runs the continuous integration build">
		<antcall target="clean" />
		<antcall target="javadoc" />
		<antcall target="findbugs" />
		<antcall target="test.all" />
		<antcall target="coverage.report" />
		<antcall target="checkstyle" />
	</target>


	<target name="findbugs" depends="compile" description="Executes findbugs to look for problems in the source.">
		<mkdir dir="${dir.build}/findbugs" />
		<findbugs home="${findbugs.home}" output="xml" outputFile="${dir.build}/findbugs/report.xml" effort="max" jvmargs="-Xmx1024m" reportLevel="low" excludeFilter="${basedir}/findbugs-filters.xml">
			<auxClasspath refid="classpath.build" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.classes}" />
		</findbugs>
	</target>

	<target name="findbugs.html" depends="compile" description="Executes findbugs to look for problems in the source.">
		<mkdir dir="${dir.build}/findbugs" />
		<findbugs home="${findbugs.home}" output="html" outputFile="${dir.build}/findbugs/report.html" effort="max" jvmargs="-Xmx1024m" reportLevel="low" excludeFilter="${basedir}/findbugs-filters.xml">
			<auxClasspath refid="classpath.build" />
			<sourcePath path="${dir.src}" />
			<class location="${dir.classes}" />
		</findbugs>
	</target>

</project>
